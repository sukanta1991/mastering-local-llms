# Docker Compose for Production Deployment
version: '3.8'

services:
  # Ollama Server
  ollama:
    image: ollama/ollama:latest
    container_name: ollama-production
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_models:/root/.ollama
      - ./logs:/var/log/ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_PORT=11434
      - OLLAMA_KEEP_ALIVE=24h
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G
    networks:
      - ollama-network

  # Web Application
  web-app:
    build:
      context: ../
      dockerfile: deployment/Dockerfile.webapp
    container_name: ollama-webapp
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - OLLAMA_HOST=http://ollama:11434
      - FLASK_ENV=production
      - WEB_SECRET_KEY=${WEB_SECRET_KEY}
    depends_on:
      ollama:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - uploads:/app/uploads
    networks:
      - ollama-network

  # API Server
  api-server:
    build:
      context: ../
      dockerfile: deployment/Dockerfile.api
    container_name: ollama-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - OLLAMA_HOST=http://ollama:11434
      - API_SECRET_KEY=${API_SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      ollama:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - api_data:/app/data
    networks:
      - ollama-network

  # Redis for Caching (Optional)
  redis:
    image: redis:7-alpine
    container_name: ollama-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    networks:
      - ollama-network

  # PostgreSQL Database (Optional)
  postgres:
    image: postgres:15-alpine
    container_name: ollama-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ollama-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ollama-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - web-app
      - api-server
    networks:
      - ollama-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: ollama-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - ollama-network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ollama-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - ollama-network

volumes:
  ollama_models:
    driver: local
  uploads:
    driver: local
  api_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ollama-network:
    driver: bridge
