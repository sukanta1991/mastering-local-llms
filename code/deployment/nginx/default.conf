# Default server configuration for Ollama applications
upstream ollama_api {
    server api-server:8000;
}

upstream ollama_web {
    server web-app:5000;
}

upstream ollama_server {
    server ollama:11434;
}

# HTTP redirect to HTTPS (optional)
server {
    listen 80;
    server_name _;
    
    # Health check endpoint
    location /nginx-health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Redirect all HTTP to HTTPS (uncomment for production with SSL)
    # return 301 https://$server_name$request_uri;
    
    # For development, serve directly
    location / {
        return 301 $scheme://$server_name:$server_port/web$request_uri;
    }
}

# Main application server
server {
    listen 80;
    # listen 443 ssl http2;  # Uncomment for HTTPS
    server_name localhost;

    # SSL configuration (uncomment for production)
    # ssl_certificate /etc/nginx/ssl/cert.pem;
    # ssl_certificate_key /etc/nginx/ssl/key.pem;
    # ssl_protocols TLSv1.2 TLSv1.3;
    # ssl_ciphers HIGH:!aNULL:!MD5;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # Web Application
    location /web {
        limit_req zone=web burst=20 nodelay;
        
        rewrite ^/web/(.*) /$1 break;
        proxy_pass http://ollama_web;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # API endpoints
    location /api {
        limit_req zone=api burst=10 nodelay;
        
        proxy_pass http://ollama_api;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Longer timeouts for AI responses
        proxy_connect_timeout 120s;
        proxy_send_timeout 120s;
        proxy_read_timeout 120s;
        
        # Enable streaming
        proxy_buffering off;
        proxy_cache off;
    }

    # Direct Ollama API access (optional, for debugging)
    location /ollama {
        rewrite ^/ollama/(.*) /$1 break;
        proxy_pass http://ollama_server;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Very long timeouts for model operations
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        
        # Streaming support
        proxy_buffering off;
        proxy_cache off;
    }

    # Static files
    location /static {
        alias /app/static;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Uploads
    location /uploads {
        alias /app/uploads;
        expires 1h;
        add_header Cache-Control "public";
    }

    # Health check
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Default location
    location / {
        return 301 /web/;
    }

    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}
